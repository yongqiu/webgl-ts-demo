# user用于设置master进程启动后，使用了参数--user=usergroup 和 --group=groupname,此时nginx.conf将使用参数中指定的用户和用户组
user nginx;

# worker进程个数：其数量直接影响性能。
# 每个worker进程都是单线程的进程，他们会调用各个模拟以实现多种多样的功能
# 如果这些模块不会出现阻塞式的调用，那么，有多少CPU内核就应该配置多少个进程，
# 反之，有可能出现阻塞式调用，那么，需要配置稍多一些的worker进程。
worker_processes  1;


# error日志的设置
# 语法：error_log /path/file level
error_log /var/log/nginx/error.log warn;

# pid文件（master进程ID的pid文件存放的路径）
pid /var/run/nginx.pid;

# event
events {
  worker_connections  1024;
}

http {
  # 嵌入其他配置 语法： include /path/file
  # 参数既可以相对路径也可以绝对路径（相对于Nginx的配置目录，即nginx.conf所在的目录）
  include /etc/nginx/mime.types;
  #
  default_type  application/octet-stream;
  log_format		main	'$remote_addr - $remote_user [$time_local] $request '
					'"$status" $body_bytes_sent "$http_referer" '
          '"$http_user_agent" "$http_x_forwarded_for"';
  access_log off;

  sendfile  on;
  # tcp_nopush  on;

  keepalive_timeout 65;

  gzip  on;

  gzip_types  text/plain application/javascript text/css;


  #虚拟主机server块
  # map $http_upgrade $connection_upgrade {
  #     default upgrade;
  #     '' close;
  # }
  server {
    # 端口
    listen  80;
    # 匹配请求中的host值
    server_name localhost;

    # 监听请求路径
    location  / {
      root  /usr/share/nginx/html/app;
      try_files $uri $uri/index.html /index.html @notfound;
      # index index.html  index.htm;
      # try_files $uri $uri/ /index.html;
      charset utf-8;
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
      add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
      if ($request_method = 'OPTIONS') {
        return 204;
      }
    }

    # error_page  404 404.html
    error_page  500 502 503 504 /50x.html;

    location = /50.html {
      root  /usr/share/nginx/html;
    }

    location = /index.html {
        add_header Cache-Control "no-cache, no-store";
    }
  }
  include /etc/nginx/conf.d/*.conf;

}
